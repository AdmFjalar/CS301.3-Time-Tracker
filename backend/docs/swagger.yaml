basePath: /v1
definitions:
  main.CreateUserTokenPayload:
    properties:
      email:
        maxLength: 255
        type: string
      password:
        maxLength: 72
        minLength: 3
        type: string
    required:
    - email
    - password
    type: object
  main.RegisterUserPayload:
    properties:
      email:
        maxLength: 255
        type: string
      password:
        maxLength: 72
        minLength: 3
        type: string
    required:
    - email
    - password
    type: object
  main.RequestPasswordResetPayload:
    properties:
      email:
        maxLength: 255
        type: string
    required:
    - email
    type: object
  main.ChangePasswordPayload:
    properties:
      old_password:
        type: string
      new_password:
        maxLength: 72
        minLength: 3
        type: string
    required:
    - old_password
    - new_password
    type: object
  main.UserWithToken:
    properties:
      email:
        type: string
      token:
        type: string
    type: object
  main.CreateTimestampPayload:
    properties:
      stamp_type:
        type: string
      stamp_time:
        type: string
    required:
    - stamp_type
    - stamp_time
    type: object
  main.UpdateTimestampPayload:
    properties:
      stamp_type:
        type: string
      stamp_time:
        type: string
    required:
    - stamp_type
    - stamp_time
    type: object
  store.Timestamp:
    properties:
      id:
        type: integer
      stamp_type:
        type: string
      stamp_time:
        type: string
    type: object
  store.Shift:
    properties:
      id:
        type: integer
      start_time:
        type: string
      end_time:
        type: string
    type: object
  store.User:
    properties:
      id:
        type: integer
      email:
        type: string
    type: object
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: API for Thyme Flies, a time-tracking application.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: Thyme Flies API
paths:
  /authentication/token:
    post:
      consumes:
      - application/json
      description: Creates a token for a user
      parameters:
      - description: User credentials
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/main.CreateUserTokenPayload'
      produces:
      - application/json
      responses:
        "200":
          description: Token
          schema:
            type: string
        "400":
          description: Bad Request
          schema: {}
        "401":
          description: Unauthorized
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      summary: Creates a token
      tags:
      - authentication
  /authentication/user:
    post:
      consumes:
      - application/json
      description: Creates a user and sends a welcome email with an activation link
      parameters:
      - description: User information
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/main.RegisterUserPayload'
      produces:
      - application/json
      responses:
        "201":
          description: User created
          schema:
            $ref: '#/definitions/main.UserWithToken'
        "400":
          description: Bad Request
          schema: {}
        "409":
          description: Conflict
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      summary: Creates a user
      tags:
      - users
  /authentication/request-password-reset:
    post:
      consumes:
      - application/json
      description: Sends a password reset link to the user's email
      parameters:
      - description: Email
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/main.RequestPasswordResetPayload'
      produces:
      - application/json
      responses:
        "200":
          description: Password reset email sent
          schema:
            type: string
        "400":
          description: Bad Request
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      summary: Requests a password reset
      tags:
      - authentication
  /users/change-password:
    put:
      consumes:
      - application/json
      description: Allows a user to change their password by providing the old and new passwords
      parameters:
      - description: Old and new passwords
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/main.ChangePasswordPayload'
      produces:
      - application/json
      responses:
        "204":
          description: No Content
          schema:
            type: string
        "400":
          description: Bad Request
          schema: {}
        "401":
          description: Unauthorized
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      summary: Change the user's password
      tags:
      - users
  /health:
    get:
      description: Healthcheck endpoint
      produces:
      - application/json
      responses:
        "200":
          description: ok
          schema:
            type: string
      summary: Healthcheck
      tags:
      - ops
  /users/activate/{token}:
    put:
      description: Activates/Register a user by invitation token
      parameters:
      - description: Invitation token
        in: path
        name: token
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: User activated
          schema:
            type: string
        "404":
          description: Not Found
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      summary: Activates/Register a user
      tags:
      - users
  /users/feed:
    get:
      consumes:
      - application/json
      description: Fetches the user feed
      parameters:
      - description: Since
        in: query
        name: since
        type: string
      - description: Until
        in: query
        name: until
        type: string
      - description: Limit
        in: query
        name: limit
        type: integer
      - description: Offset
        in: query
        name: offset
        type: integer
      - description: Sort
        in: query
        name: sort
        type: string
      - description: Search
        in: query
        name: search
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/store.Timestamp'
            type: array
        "400":
          description: Bad Request
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      security:
      - ApiKeyAuth: []
      summary: Fetches the user feed
      tags:
      - feed
  /users/{id}:
    get:
      consumes:
      - application/json
      description: Fetches a user profile by ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/store.User'
        "400":
          description: Bad Request
          schema: {}
        "404":
          description: Not Found
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      security:
      - ApiKeyAuth: []
      summary: Fetches a user profile
      tags:
      - users
  /timestamps:
    post:
      consumes:
      - application/json
      description: Creates a timestamp for a user
      parameters:
      - description: Timestamp information
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/main.CreateTimestampPayload'
      produces:
      - application/json
      responses:
        "201":
          description: Timestamp created
          schema:
            $ref: '#/definitions/store.Timestamp'
        "400":
          description: Bad Request
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      security:
      - ApiKeyAuth: []
      summary: Creates a timestamp
      tags:
      - timestamps
  /timestamps/{id}:
    get:
      consumes:
      - application/json
      description: Fetches a timestamp by ID
      parameters:
      - description: Timestamp ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/store.Timestamp'
        "400":
          description: Bad Request
          schema: {}
        "404":
          description: Not Found
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      security:
      - ApiKeyAuth: []
      summary: Fetches a timestamp
      tags:
      - timestamps
    patch:
      consumes:
      - application/json
      description: Updates a timestamp by ID
      parameters:
      - description: Timestamp ID
        in: path
        name: id
        required: true
        type: integer
      - description: Updated timestamp information
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/main.UpdateTimestampPayload'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/store.Timestamp'
        "400":
          description: Bad Request
          schema: {}
        "404":
          description: Not Found
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      security:
      - ApiKeyAuth: []
      summary: Updates a timestamp
      tags:
      - timestamps
    delete:
      produces:
      - application/json
      description: Deletes a timestamp by ID
      parameters:
      - description: Timestamp ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "204":
          description: Timestamp deleted
          schema:
            type: string
        "404":
          description: Not Found
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      security:
      - ApiKeyAuth: []
      summary: Deletes a timestamp
      tags:
      - timestamps
  /timestamps/latest:
    get:
      produces:
      - application/json
      description: Fetches the most recent timestamp for a user
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/store.Timestamp'
        "500":
          description: Internal Server Error
          schema: {}
      security:
      - ApiKeyAuth: []
      summary: Fetches the latest timestamp
      tags:
      - timestamps
  /shifts:
    get:
      produces:
      - application/json
      description: Fetches finished shifts for a user
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/store.Shift'
        "500":
          description: Internal Server Error
          schema: {}
      security:
      - ApiKeyAuth: []
      summary: Fetches finished shifts
      tags:
      - shifts
  /shifts/{userID}:
    get:
      produces:
      - application/json
      description: Fetches finished shifts for a specific user by their ID
      parameters:
      - description: User ID
        in: path
        name: userID
        required: true
        type: integer
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/store.Shift'
        "500":
          description: Internal Server Error
          schema: {}
      security:
      - ApiKeyAuth: []
      summary: Fetches finished shifts by user ID
      tags:
      - shifts
securityDefinitions:
  ApiKeyAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
